# install docker on local machine using `snap`: https://snapcraft.io/
$ sudo snap info docker
name:      docker
summary:   The docker app deployment mechanism
publisher: Docker, Inc (docker-inc)
contact:   snappy-devel@lists.ubuntu.com
license:   Apache-2.0
description: |
  Docker for snappy.
  
  This snap allows you to use the full capabilities of docker on snappy.
  
  In order to use 'docker build', 'docker save' and 'docker load', you need to place your dockerfile
  within $HOME. All files that you want docker to access to must be within this path.
  
  You may also use the 'docker-privilege' command to allow you to use 'docker run --privileged'.
  Because docker is unencumbered on snappy, it is recommended that you follow the Docker projects
  recommendations for using docker securely.
snap-id: sLCsFAO8PKM5Z0fAKNszUOX0YASjQfeZ
channels:                                         
  stable:          18.06.1-ce   (321) 102MB - 
  candidate:       18.06.1-ce   (321) 102MB - 
  beta:            18.06.1-ce   (321) 102MB - 
  edge:            17.03.1-ce-1 (333) 38MB  - 
  17.09/stable:    –                          
  17.09/candidate: 17.09.1-ce   (232) 44MB  - 
  17.09/beta:      17.09.1-ce   (232) 44MB  - 
  17.09/edge:      17.09.1-ce   (232) 44MB  - 
  17.06/stable:    17.06.2-ce   (179) 43MB  - 
  17.06/candidate: 17.06.2-ce   (179) 43MB  - 
  17.06/beta:      ↑                          
  17.06/edge:      17.06.2-ce-1 (237) 44MB  - 
  17.03/stable:    17.03.2-ce-1 (159) 42MB  - 
  17.03/candidate: 17.03.2-ce-1 (159) 42MB  - 
  17.03/beta:      ↑                          
  17.03/edge:      17.03.2-ce-1 (159) 42MB  - 
$ sudo snap install docker
# <removed output>

# test docker installation: current user (`mocc`) does not have the right permissions
$ docker run helloworld
docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.38/containers/create: dial unix /var/run/docker.sock: connect: permission denied.
See 'docker run --help'.

# check docker socket permissions
$ ll /var/run/docker.sock 
srw-rw---- 1 root root 0 Dez  7 15:43 /var/run/docker.sock=

# create a new group called `docker`
$ sudo groupadd docker

# add current user (`mocc`) to the new group
$ sudo usermod -aG docker mocc

# change group-ownership of socket to the new `docker` group
$ sudo chgrp docker /var/run/docker.sock

# test docker installation: permissions were not applied to current session
$ docker run hello-world
docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.38/containers/create: dial unix /var/run/docker.sock: connect: permission denied.
See 'docker run --help'.

# close script and terminal
$ exit

# new group ownerships do not apply to the current session
# we closed the session and logged back in using the desktop environment

# test docker: docker fetches `hello-world` image and executes it
$ docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world

d1725b59e92d: Pulling fs layer d1725b59e92d: Downloading [=========================>                         ]     501B/977B
d1725b59e92d: Downloading [==================================================>]     977B/977B
d1725b59e92d: Verifying Checksum d1725b59e92d: Download complete 
d1725b59e92d: Extracting [==================================================>]     977B/977B
d1725b59e92d: Extracting [==================================================>]     977B/977B
d1725b59e92d: Pull complete 
Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

# docker was successfully installed
# install qemu using apt
$ sudo apt install qemu
# <removed output>
Get:1 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libiscsi7 amd64 1.17.0-1.1 [55,4 kB]
Get:2 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libnl-route-3-200 amd64 3.2.29-0ubuntu3 [146 kB]
Get:3 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libibverbs1 amd64 17.1-1 [44,4 kB]
Get:4 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 librados2 amd64 12.2.7-0ubuntu0.18.04.1 [2.660 kB]
Get:5 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 librbd1 amd64 12.2.7-0ubuntu0.18.04.1 [915 kB]
Get:6 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 qemu-block-extra amd64 1:2.11+dfsg-1ubuntu7.8 [39,6 kB]
Get:7 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 qemu-system-common amd64 1:2.11+dfsg-1ubuntu7.8 [662 kB]
Get:8 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 binfmt-support amd64 2.1.8-2 [51,6 kB]
Get:9 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 msr-tools amd64 1.3-2build1 [9.760 B]
Get:10 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 cpu-checker amd64 0.7-0ubuntu7 [6.862 B]
Get:11 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 ibverbs-providers amd64 17.1-1 [160 kB]
Get:12 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 ipxe-qemu all 1.0.0+git-20180124.fbe8c52d-0ubuntu2.1 [911 kB]
Get:13 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 ipxe-qemu-256k-compat-efi-roms all 1.0.0+git-20150424.a25a16d-0ubuntu2 [545 kB]
Get:14 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libaio1 amd64 0.3.110-5 [6.448 B]
Get:15 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libcacard0 amd64 1:2.5.0-3 [19,6 kB]
Get:16 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libsdl1.2debian amd64 1.2.15+dfsg2-0.1 [174 kB]
Get:17 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 libspice-server1 amd64 0.14.0-1ubuntu2.2 [345 kB]
Get:18 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libusbredirparser1 amd64 0.7.1-1 [13,6 kB]
Get:19 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libxenstore3.0 amd64 4.9.2-0ubuntu1 [19,7 kB]
Get:20 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 libxen-4.9 amd64 4.9.2-0ubuntu1 [399 kB]
# <removed output>

# download debian x86 (32bit) image for qemu
$ curl -o debian_wheezy_i386.qcow2 https://people.debian.org/~aurel32/qemu/i386/debian_wheezy_i386_standard.qcow2

# check for kvm kernel module to be loaded
$ lsmod | grep kvm
kvm_intel             212992  0
kvm                   598016  1 kvm_intel
irqbypass              16384  1 kvm

# test qemu installation by launching the downloaded image
$ qemu-system-i386 debian_wheezy_i386.qcow2

# qemu was successfully installed